# coding=utf-8
import re
import os
import collections
import ConfigParser
smalipath=[] # 存放单个反编译文件的所有smali文件
# 从单个smali文件中得到n-gram模型
def getOpcodeList(filename):# 将单个smali文件opcode序列读出来
    patton=r'[a-z]+-{0,1}[a-z]*' # 匹配Opcode正则
    OpcodeList=[]  # 存放opcode序列
    with open(filename) as f:
       for line in f:
           if not (line.startswith(".") or line.startswith(".",4,5)):
                    if re.search(patton,line) != None:
                        OpcodeList.append(re.search(patton,line).group(0))

    return OpcodeList

def getNgram(OpcodeList,n=3):# 对opcode序列处理为n-gram模型
    ngramList = [tuple(OpcodeList[i:i+n]) for i in range(len(OpcodeList)-n)]
    Ngramcounter=collections.Counter(ngramList)
    return Ngramcounter

# 需要得到给定路径下所有的smali文件
def getAllSmali(sourcepath):
    if os.path.isfile(sourcepath) and sourcepath.endswith('.smali'):
        smalipath.append(sourcepath)
    else:
        files=os.listdir(sourcepath)
        for f in files:
            f=os.path.join(sourcepath,f)
            if os.path.isdir(f):
                getAllSmali(f)
            else:
                if f.endswith(".smali"):
                    smalipath.append(f)
    return
# 得到配置信息
config=ConfigParser.ConfigParser()
config.read(r'DalvikOpcode.ini')
sourcepath=config.get("path","sourcepath") # 这里的sourcepath是一个程序反编译文件的目录，若是反编译文件总目录对source循环
savepath=config.get("path","savepath")
print "The sourcepath is "+sourcepath
print "The savepath is "+savepath

files=os.listdir(sourcepath) # files是多个反编译程序的文件名的集合
for file in files:
    # 单个应用反编译目录的执行
    print '正在处理'+file
    savefile=os.path.join(savepath,file)
    file=os.path.join(sourcepath,file)
    if(len(os.listdir(file))==0):# 去除反编译失败的文件目录
        print file+'文件夹为空'
        continue
    smalipath=[] # 每次初始化为空
    getAllSmali(file)
    counter=collections.Counter([])
    for smalifile in smalipath:
        OpcodeList=getOpcodeList(smalifile)
        counter.update(getNgram(OpcodeList)) # 计数器合并
    with open(savefile,'w') as f:
        for key,value in counter.most_common(50):
            f.write(str(key)+':'+str(value)+'\n')
print 'success'


