# coding=utf-8
import re
import os
import collections
import ConfigParser
import logging
smalipath=[]           # 存放单个反编译文件的所有smali文件
# 从单个smali文件中得到n-gram模型
d=dict()                # 存放opcode与其对应的分类

logging.basicConfig(filename='log.log',format = '%(asctime)s - %(levelname)s: %(message)s')


def getOpcodeList(filename):                # 将单个smali文件opcode序列读出来
    patton=r'[a-z]+-{0,1}[a-z]*'               # 匹配Opcode正则
    OpcodeList=[]              # 存放opcode序列
    try:
        f= open(filename,'r')
        for line in f:
            if not (line.startswith(".") or line.startswith(".",4,5)):
                    if re.search(patton,line) != None:
                        OpcodeList.append(re.search(patton,line).group(0))
        newlist=[]
        for opcode in OpcodeList:
            if d.has_key(opcode):          # 判断是否是需要的opcode
                value=d[opcode]
                newlist.append(value)
        return newlist            # 可以在这里调用一个方法将源list转为经过处理的list
    except IOError,msg:
        logging.error(msg)
        print '%s文件异常'%filename
        return None


def getclassfydict(classfyfile):              # 将每个opcode和其对应的分类存入字典中，在对opcode进行处理是用此函数
    value=None
    with open(classfyfile,'r') as f:
        for line in f:
            line=line.strip()
            if line==None:
                continue
            if ':' in line:
                value=line[0:-1]
                # print value
            else:
               d[line]=value

    return


def getNgram(OpcodeList,n=3):               # 对opcode序列处理为n-gram模型
    ngramList = [tuple(OpcodeList[i:i+n]) for i in range(len(OpcodeList)-n)]
    Ngramcounter=collections.Counter(ngramList)
    return Ngramcounter


# 需要得到给定路径下所有的smali文件
def getAllSmali(sourcepath):
    if os.path.isfile(sourcepath) and sourcepath.endswith('.smali'):
        if len(str(sourcepath))<200:
            smalipath.append(sourcepath)
    else:
        files=os.listdir(sourcepath)
        for f in files:
            f=os.path.join(sourcepath,f)
            if os.path.isdir(f):
                getAllSmali(f)
            else:
                if f.endswith(".smali") and len(str(f))<200:
                    smalipath.append(f)
    return

# 得到配置信息
config=ConfigParser.ConfigParser()
config.read(r'init.ini')
sourcepath=config.get("Opcode","savepath")            # 这里的sourcepath是一个程序反编译文件的目录，若是反编译文件总目录对source循环
savepath=config.get("Opcode","opcodeResultpath")
classfyfile=config.get('Opcode','classfyfile')
print "The sourcepath is "+sourcepath
print "The savepath is "+savepath

numempty=0
numnosmali=0
getclassfydict(classfyfile)
files=os.listdir(sourcepath)         # files是多个反编译程序的文件名的集合
flag=1
for file in files:
    if flag==600:
        break
    flag=flag+1
    # 单个应用反编译目录的执行
    print '正在处理'+file
    savefile=os.path.join(savepath,file)
    file=os.path.join(sourcepath,file)
    if len(os.listdir(file))==0:   # 去除反编译失败的文件目录
        logging.info('%s文件夹为空'%file)
        numempty=numempty+1
        continue
    smalipath=[] # 每次初始化为空
    getAllSmali(file)
    counter=collections.Counter([])
    if len(smalipath)<=0:   # 有些反编译成功但是没有smali文件
        numnosmali=numnosmali+1
        continue
    for smalifile in smalipath:
        OpcodeList=getOpcodeList(smalifile)
        if OpcodeList !=None:
            counter.update(getNgram(OpcodeList))   # 计数器合并
    with open(savefile,'w') as f:
        for key,value in counter.items():  # 保留全部
            f.write(str(key)+':'+str(value)+'\n')
print '总文件数为'+str(len(files))
print '文件夹为空的个数为'+str(numempty)
print '文件夹不为空但是没有samli文件的个数为'+str(numnosmali)
print 'success'


